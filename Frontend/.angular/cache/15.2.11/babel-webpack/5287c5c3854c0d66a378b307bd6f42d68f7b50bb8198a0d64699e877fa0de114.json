{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService, router, alertService) {\n      this.accountService = accountService;\n      this.router = router;\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          // Handle authentication errors\n          if ([401, 403].includes(err.status)) {\n            if (this.accountService.accountValue && !request.url.includes('/refresh-token')) {\n              console.log('Authentication error: ', err.status, request.url);\n              this.handleAuthError(err);\n            }\n          }\n          // Create a user-friendly error message\n          let errorMessage = this.createUserFriendlyErrorMessage(err);\n          console.error('Error interceptor caught:', err);\n          return throwError(() => errorMessage);\n        }\n        // For non-HttpErrorResponse, just return the error\n        return throwError(() => err);\n      }));\n    }\n    handleAuthError(err) {\n      // For auth errors, try to refresh the token once\n      if (err.status === 401) {\n        this.accountService.refreshToken().subscribe({\n          error: refreshError => {\n            console.error('Token refresh failed:', refreshError);\n            // If refresh fails, log out\n            this.accountService.clearAccountData();\n            this.alertService.error('Your session has expired. Please log in again.');\n            this.router.navigate(['/account/login']);\n          }\n        });\n      } else if (err.status === 403) {\n        // Forbidden - user doesn't have necessary permissions\n        this.alertService.error('You do not have permission to access this resource');\n      }\n    }\n    createUserFriendlyErrorMessage(err) {\n      var _a;\n      // Start with the error message from the server if available\n      let errorMsg = err && err.error && err.error.message || err.statusText;\n      // Replace generic error messages with more user-friendly ones\n      if (err.status === 401) {\n        if ((_a = err.url) === null || _a === void 0 ? void 0 : _a.includes('authenticate')) {\n          errorMsg = 'Invalid email or password';\n        } else {\n          errorMsg = 'You need to log in to access this resource';\n        }\n      } else if (err.status === 403) {\n        errorMsg = 'You do not have permission to perform this action';\n      } else if (err.status === 404) {\n        errorMsg = 'The requested resource was not found';\n      } else if (err.status === 0) {\n        errorMsg = 'Cannot connect to the server. Please check your internet connection';\n      } else if (err.status >= 500) {\n        errorMsg = 'A server error occurred. Please try again later';\n      }\n      return errorMsg;\n    }\n  }\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i1.AlertService));\n  };\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}