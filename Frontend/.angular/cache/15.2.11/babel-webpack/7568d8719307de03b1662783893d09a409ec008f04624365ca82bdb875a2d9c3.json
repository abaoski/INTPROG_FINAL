{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize, tap } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n      this.tokenRefreshAttempts = 0;\n      this.MAX_REFRESH_ATTEMPTS = 3;\n    }\n    intercept(request, next) {\n      // Add auth header with JWT if account is logged in and request is to the API url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account === null || account === void 0 ? void 0 : account.jwtToken;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      if (isLoggedIn && isApiUrl && !this.isRefreshTokenRequest(request)) {\n        request = this.addTokenHeader(request, account.jwtToken);\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          // Handle 401 errors (unauthorized)\n          if (!this.isRefreshing && !this.isRefreshTokenRequest(request) && this.tokenRefreshAttempts < this.MAX_REFRESH_ATTEMPTS) {\n            this.tokenRefreshAttempts++;\n            console.log(`Token refresh attempt ${this.tokenRefreshAttempts} of ${this.MAX_REFRESH_ATTEMPTS}`);\n            return this.handle401Error(request, next);\n          } else if (this.isRefreshTokenRequest(request)) {\n            // If refresh token fails, we should log out only in production\n            if (environment.production) {\n              this.accountService.clearAccountData();\n              return throwError(() => new Error('Your session has expired. Please log in again.'));\n            } else {\n              // In development with fake backend, just return the error\n              return throwError(() => error);\n            }\n          } else if (this.tokenRefreshAttempts >= this.MAX_REFRESH_ATTEMPTS) {\n            console.error('Max token refresh attempts reached. Stopping refresh cycle.');\n            this.tokenRefreshAttempts = 0;\n            // Only log out in production\n            if (environment.production) {\n              this.accountService.clearAccountData();\n              return throwError(() => new Error('Maximum refresh attempts exceeded. Please log in again.'));\n            } else {\n              // In development, allow request to proceed with error for debugging\n              return throwError(() => error);\n            }\n          }\n        } else if (error instanceof HttpErrorResponse && error.status === 403) {\n          // Don't automatically logout on 403 (forbidden)\n          return throwError(() => new Error('Access forbidden. You do not have permission to access this resource.'));\n        }\n        return throwError(() => error);\n      }));\n    }\n    isRefreshTokenRequest(request) {\n      return request.url.includes('/refresh-token') || request.url.includes('/revoke-token');\n    }\n    addTokenHeader(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n    }\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        return this.accountService.refreshToken().pipe(tap(account => {\n          console.log('Token refreshed successfully');\n          this.tokenRefreshAttempts = 0; // Reset attempts counter on successful refresh\n        }), switchMap(account => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(account.jwtToken);\n          return next.handle(this.addTokenHeader(request, account.jwtToken));\n        }), catchError(error => {\n          this.isRefreshing = false;\n          console.error('Token refresh failed:', error);\n          // Don't automatically logout in development with fake backend\n          if (environment.production) {\n            this.accountService.clearAccountData();\n          }\n          return throwError(() => error);\n        }), finalize(() => {\n          this.isRefreshing = false;\n        }));\n      }\n      return this.refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next.handle(this.addTokenHeader(request, token))));\n    }\n  }\n  JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  JwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}