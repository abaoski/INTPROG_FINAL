{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { Role, WorkflowStatus } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./confirm-modal.component\";\nconst _c0 = [\"confirmModal\"];\nfunction ListWorkflowComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"All Workflows\");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction ListWorkflowComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"Employee Workflows\");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction ListWorkflowComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 12);\n    i0.ɵɵtext(2, \"View All Workflows\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListWorkflowComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ListWorkflowComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" No workflows found for Employee \", ctx_r4.displayEmployeeId, \" \");\n  }\n}\nfunction ListWorkflowComponent_table_11_tr_16_div_14_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 30);\n  }\n}\nfunction ListWorkflowComponent_table_11_tr_16_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"button\", 25);\n    i0.ɵɵtemplate(2, ListWorkflowComponent_table_11_tr_16_div_14_span_2_Template, 1, 0, \"span\", 26);\n    i0.ɵɵtext(3, \" Actions \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ul\", 27)(5, \"li\")(6, \"a\", 28);\n    i0.ɵɵtext(7, \"View Details\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"li\")(9, \"a\", 29);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_table_11_tr_16_div_14_Template_a_click_9_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const workflow_r9 = i0.ɵɵnextContext().$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.openStatusChangeModal(workflow_r9.id, ctx_r13.WorkflowStatus.Approved));\n    });\n    i0.ɵɵtext(10, \"Approve\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"li\")(12, \"a\", 29);\n    i0.ɵɵlistener(\"click\", function ListWorkflowComponent_table_11_tr_16_div_14_Template_a_click_12_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const workflow_r9 = i0.ɵɵnextContext().$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.openStatusChangeModal(workflow_r9.id, ctx_r16.WorkflowStatus.Rejected));\n    });\n    i0.ɵɵtext(13, \"Reject\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const workflow_r9 = i0.ɵɵnextContext().$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", workflow_r9.isUpdating);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", workflow_r9.isUpdating);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"view/\", workflow_r9.id, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵclassProp(\"disabled\", workflow_r9.status === ctx_r10.WorkflowStatus.Approved);\n    i0.ɵɵadvance(3);\n    i0.ɵɵclassProp(\"disabled\", workflow_r9.status === ctx_r10.WorkflowStatus.Rejected);\n  }\n}\nfunction ListWorkflowComponent_table_11_tr_16_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 31);\n    i0.ɵɵtext(2, \"View Details\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const workflow_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"view/\", workflow_r9.id, \"\");\n  }\n}\nconst _c1 = function (a0, a1, a2) {\n  return {\n    \"badge-status-info\": a0,\n    \"badge-status-success\": a1,\n    \"badge-status-danger\": a2\n  };\n};\nfunction ListWorkflowComponent_table_11_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"span\", 22);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtemplate(14, ListWorkflowComponent_table_11_tr_16_div_14_Template, 14, 7, \"div\", 23);\n    i0.ɵɵtemplate(15, ListWorkflowComponent_table_11_tr_16_div_15_Template, 3, 1, \"div\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const workflow_r9 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r9.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r9.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(workflow_r9.details);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(11, _c1, workflow_r9.status === ctx_r7.WorkflowStatus.ForReviewing, workflow_r9.status === ctx_r7.WorkflowStatus.Approved, workflow_r9.status === ctx_r7.WorkflowStatus.Rejected));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(workflow_r9.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(12, 8, workflow_r9.datetimecreated, \"medium\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isAdmin);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isAdmin);\n  }\n}\nfunction ListWorkflowComponent_table_11_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 32)(2, \"span\", 33);\n    i0.ɵɵtext(3, \"No workflows found\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction ListWorkflowComponent_table_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 16)(1, \"thead\")(2, \"tr\")(3, \"th\", 17);\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 18);\n    i0.ɵɵtext(6, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 19);\n    i0.ɵɵtext(8, \"Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 17);\n    i0.ɵɵtext(10, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 20);\n    i0.ɵɵtext(12, \"Date & Time Created\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\", 18);\n    i0.ɵɵtext(14, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"tbody\");\n    i0.ɵɵtemplate(16, ListWorkflowComponent_table_11_tr_16_Template, 16, 15, \"tr\", 21);\n    i0.ɵɵtemplate(17, ListWorkflowComponent_table_11_tr_17_Template, 4, 0, \"tr\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(16);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.workflows);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.loading && (!ctx_r5.workflows || ctx_r5.workflows.length === 0));\n  }\n}\nexport let ListWorkflowComponent = /*#__PURE__*/(() => {\n  class ListWorkflowComponent {\n    constructor(workflowService, alertService, accountService, employeeService, route) {\n      var _a;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.route = route;\n      this.workflows = null;\n      this.loading = false;\n      this.isAdmin = false;\n      this.employeeId = null;\n      this.displayEmployeeId = null;\n      this.employeeFullName = null;\n      this.confirmMessage = '';\n      this.notFound = false;\n      this.pendingStatusChange = null;\n      // Make enum available in template\n      this.WorkflowStatus = WorkflowStatus;\n      this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      // Get employeeId from query params\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeid'];\n        if (this.employeeId) {\n          this.loadEmployee();\n          this.loadWorkflows();\n        } else {\n          this.notFound = false;\n          this.loadWorkflows();\n        }\n      });\n    }\n    ngOnInit() {\n      // If not admin and no employeeId specified, find the current user's employee ID\n      if (!this.isAdmin && !this.employeeId) {\n        this.findCurrentUserEmployeeId();\n      } else {\n        this.loadWorkflows();\n      }\n    }\n    findCurrentUserEmployeeId() {\n      var _a;\n      this.loading = true;\n      const currentAccountId = (_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.id;\n      this.employeeService.getAll().pipe(first()).subscribe({\n        next: employees => {\n          const currentEmployee = employees.find(emp => emp.accountId === Number(currentAccountId));\n          if (currentEmployee) {\n            this.employeeId = currentEmployee.id.toString();\n            this.loadEmployee();\n            this.loadWorkflows();\n          } else {\n            this.loading = false;\n            this.alertService.error('Could not find your employee record');\n          }\n        },\n        error: error => {\n          this.loading = false;\n          this.alertService.error(error);\n        }\n      });\n    }\n    loadEmployee() {\n      if (!this.employeeId) return;\n      this.employeeService.getById(this.employeeId).pipe(first()).subscribe({\n        next: employee => {\n          if (employee && employee.account) {\n            this.displayEmployeeId = employee.employeeId;\n            const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\n            const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\n            this.employeeFullName = `${firstName} ${lastName}`;\n          }\n        },\n        error: error => {\n          this.alertService.error(error);\n        }\n      });\n    }\n    loadWorkflows() {\n      this.loading = true;\n      let request;\n      if (this.employeeId) {\n        // For both admin and regular users, filter by employeeId if it's specified\n        request = this.workflowService.getByEmployeeId(this.employeeId);\n      } else if (this.isAdmin) {\n        // Only admins can see all workflows\n        request = this.workflowService.getAll();\n      } else {\n        // This shouldn't normally happen for regular users (they should have employeeId set by findCurrentUserEmployeeId)\n        // But as a fallback, show no workflows\n        this.workflows = [];\n        this.loading = false;\n        this.notFound = true;\n        return;\n      }\n      request.pipe(first()).subscribe({\n        next: workflows => {\n          // Sort workflows by date in descending order\n          this.workflows = workflows.sort((a, b) => {\n            const dateA = new Date(a.datetimecreated).getTime();\n            const dateB = new Date(b.datetimecreated).getTime();\n            return dateB - dateA;\n          });\n          this.loading = false;\n          this.notFound = false;\n        },\n        error: error => {\n          if (error.status === 404) {\n            this.notFound = true;\n          }\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    openStatusChangeModal(id, status) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      this.pendingStatusChange = {\n        id,\n        status\n      };\n      let statusMessage;\n      if (status === WorkflowStatus.Approved) {\n        statusMessage = 'approve';\n      } else if (status === WorkflowStatus.Rejected) {\n        statusMessage = 'reject';\n      } else {\n        statusMessage = 'mark for review';\n      }\n      this.confirmMessage = `Are you sure you want to ${statusMessage} this workflow?`;\n      this.confirmModal.show();\n    }\n    onStatusChangeConfirmed() {\n      if (!this.pendingStatusChange) return;\n      const {\n        id,\n        status\n      } = this.pendingStatusChange;\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      workflow.isUpdating = true;\n      this.workflowService.changeStatus(id, status).pipe(first()).subscribe({\n        next: () => {\n          workflow.status = status;\n          workflow.isUpdating = false;\n          this.alertService.success('Workflow status updated successfully');\n        },\n        error: error => {\n          this.alertService.error(error);\n          workflow.isUpdating = false;\n        }\n      });\n      this.pendingStatusChange = null;\n    }\n    deleteWorkflow(id) {\n      const workflow = this.workflows.find(x => x.id === id);\n      if (!workflow) return;\n      if (confirm('Are you sure you want to delete this workflow?')) {\n        workflow.isDeleting = true;\n        this.workflowService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.workflows = this.workflows.filter(x => x.id !== id);\n            this.alertService.success('Workflow deleted successfully');\n          },\n          error: error => {\n            this.alertService.error(error);\n            workflow.isDeleting = false;\n          }\n        });\n      }\n    }\n  }\n  ListWorkflowComponent.ɵfac = function ListWorkflowComponent_Factory(t) {\n    return new (t || ListWorkflowComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  ListWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function ListWorkflowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.confirmModal = _t.first);\n      }\n    },\n    decls: 14,\n    vars: 7,\n    consts: [[1, \"container\"], [1, \"card\"], [1, \"card-header\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [4, \"ngIf\"], [1, \"card-body\"], [\"class\", \"text-center\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"class\", \"table table-professional table-professional-primary table-professional-striped\", 4, \"ngIf\"], [3, \"message\", \"confirmed\"], [\"confirmModal\", \"\"], [\"routerLink\", \"/workflows\", 1, \"btn\", \"btn-secondary\"], [1, \"text-center\"], [1, \"spinner-border\", \"spinner-border-lg\", \"align-center\"], [1, \"alert\", \"alert-warning\"], [1, \"table\", \"table-professional\", \"table-professional-primary\", \"table-professional-striped\"], [2, \"width\", \"10%\"], [2, \"width\", \"15%\"], [2, \"width\", \"30%\"], [2, \"width\", \"20%\"], [4, \"ngFor\", \"ngForOf\"], [1, \"badge-status\", 3, \"ngClass\"], [\"class\", \"btn-group\", 4, \"ngIf\"], [1, \"btn-group\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", 1, \"btn\", \"btn-sm\", \"btn-primary\", \"dropdown-toggle\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [1, \"dropdown-menu\"], [1, \"dropdown-item\", 3, \"routerLink\"], [1, \"dropdown-item\", 3, \"click\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"], [1, \"btn\", \"btn-sm\", \"btn-primary\", 3, \"routerLink\"], [\"colspan\", \"6\", 1, \"text-center\"], [1, \"text-muted\"]],\n    template: function ListWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\", 4);\n        i0.ɵɵtemplate(5, ListWorkflowComponent_ng_container_5_Template, 2, 0, \"ng-container\", 5);\n        i0.ɵɵtemplate(6, ListWorkflowComponent_ng_container_6_Template, 2, 0, \"ng-container\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, ListWorkflowComponent_div_7_Template, 3, 0, \"div\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵtemplate(9, ListWorkflowComponent_div_9_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(10, ListWorkflowComponent_div_10_Template, 2, 1, \"div\", 8);\n        i0.ɵɵtemplate(11, ListWorkflowComponent_table_11_Template, 18, 2, \"table\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"app-confirm-modal\", 10, 11);\n        i0.ɵɵlistener(\"confirmed\", function ListWorkflowComponent_Template_app_confirm_modal_confirmed_12_listener() {\n          return ctx.onStatusChangeConfirmed();\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.employeeId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.notFound);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && !ctx.notFound && ctx.workflows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"message\", ctx.confirmMessage);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i2.RouterLink, i4.ConfirmModalComponent, i3.DatePipe],\n    encapsulation: 2\n  });\n  return ListWorkflowComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}