{"ast":null,"code":"import { switchMap, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./employee.service\";\nconst baseUrl = `${environment.apiUrl}/requests`;\nexport let RequestService = /*#__PURE__*/(() => {\n  class RequestService {\n    constructor(http, employeeService) {\n      this.http = http;\n      this.employeeService = employeeService;\n    }\n    // Create a new request\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    // Get all requests (Admin only)\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    // Get request by ID\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    // Get requests for an employee\n    getByEmployeeId(employeeId) {\n      return this.http.get(`${baseUrl}/employee/${employeeId}`);\n    }\n    // Get requests for the current logged-in user's employee record\n    getMyRequests() {\n      return this.employeeService.getCurrentEmployeeId().pipe(switchMap(employeeId => {\n        if (!employeeId) {\n          console.error('No employee ID found for current user');\n          return of([]);\n        }\n        return this.getByEmployeeId(employeeId);\n      }), catchError(error => {\n        console.error('Error fetching my requests:', error);\n        return of([]);\n      }));\n    }\n    // Get assigned requests\n    getAssignedRequests() {\n      return this.http.get(`${baseUrl}/assigned`);\n    }\n    // Update request\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params);\n    }\n    // Delete request (Admin only)\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n    // Update request status\n    changeStatus(id, status, notes = '') {\n      return this.http.put(`${baseUrl}/${id}/status`, {\n        status,\n        notes\n      });\n    }\n  }\n  RequestService.ɵfac = function RequestService_Factory(t) {\n    return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EmployeeService));\n  };\n  RequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestService,\n    factory: RequestService.ɵfac,\n    providedIn: 'root'\n  });\n  return RequestService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}