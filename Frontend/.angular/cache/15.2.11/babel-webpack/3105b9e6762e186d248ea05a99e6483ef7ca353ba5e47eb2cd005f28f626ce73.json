{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nfunction AlertComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"a\", 4);\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4, \"Test alert - if you see this, alerts are working\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AlertComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"a\", 6);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_2_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const alert_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.removeAlert(alert_r2));\n    });\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.cssClasses(alert_r2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", alert_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nexport let AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n      this.id = 'default-alert';\n      this.fade = true;\n      this.alerts = [];\n    }\n    ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n          // remove 'keepAfterRouteChange' flag on the rest\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        }\n        // add alert to array\n        this.alerts.push(alert);\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 6000);\n        }\n      });\n      // clear alerts on location change\n      this.routeSubscription = this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.alertService.clear(this.id);\n        }\n      });\n    }\n    ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n    }\n    removeAlert(alert) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n      if (this.fade) {\n        // fade out alert\n        alert.fade = true;\n        // remove alert after faded out\n        setTimeout(() => {\n          this.alerts = this.alerts.filter(x => x !== alert);\n        }, 250);\n      } else {\n        // remove alert\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }\n    }\n    cssClasses(alert) {\n      if (!alert) return;\n      const classes = ['alert', 'alert-dismissable'];\n      const alertTypeClass = {\n        [AlertType.Success]: 'alert alert-success',\n        [AlertType.Error]: 'alert alert-danger',\n        [AlertType.Info]: 'alert alert-info',\n        [AlertType.Warning]: 'alert alert-warning'\n      };\n      classes.push(alertTypeClass[alert.type]);\n      if (alert.fade) {\n        classes.push('fade');\n      }\n      return classes.join(' ');\n    }\n  }\n  AlertComponent.ɵfac = function AlertComponent_Factory(t) {\n    return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n  };\n  AlertComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AlertComponent,\n    selectors: [[\"alert\"]],\n    inputs: {\n      id: \"id\",\n      fade: \"fade\"\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"global-alerts\", 2, \"position\", \"fixed\", \"bottom\", \"20px\", \"right\", \"20px\", \"z-index\", \"1040\", \"max-width\", \"400px\", \"margin\", \"0 auto\"], [\"class\", \"alert alert-info alert-dismissable\", \"style\", \"display: none;\", 4, \"ngIf\"], [\"style\", \"margin-bottom: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border-left: 5px solid #007bff;\", 3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"alert\", \"alert-info\", \"alert-dismissable\", 2, \"display\", \"none\"], [1, \"close\", 2, \"cursor\", \"pointer\", \"float\", \"right\", \"margin-left\", \"15px\"], [2, \"margin-bottom\", \"10px\", \"box-shadow\", \"0 4px 8px rgba(0,0,0,0.1)\", \"border-left\", \"5px solid #007bff\"], [1, \"close\", 2, \"cursor\", \"pointer\", \"float\", \"right\", \"margin-left\", \"15px\", \"font-size\", \"1.5rem\", 3, \"click\"], [3, \"innerHTML\"]],\n    template: function AlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, AlertComponent_div_1_Template, 5, 0, \"div\", 1);\n        i0.ɵɵtemplate(2, AlertComponent_div_2_Template, 4, 4, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.alerts.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    encapsulation: 2\n  });\n  return AlertComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}