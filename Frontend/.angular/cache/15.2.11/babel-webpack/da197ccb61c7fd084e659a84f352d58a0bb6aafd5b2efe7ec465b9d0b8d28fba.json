{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first, finalize } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction ForgotPasswordComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ForgotPasswordComponent_div_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ForgotPasswordComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtemplate(1, ForgotPasswordComponent_div_8_div_1_Template, 2, 0, \"div\", 10);\n    i0.ɵɵtemplate(2, ForgotPasswordComponent_div_8_div_2_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.email.errors.email);\n  }\n}\nfunction ForgotPasswordComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 11);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport let ForgotPasswordComponent = /*#__PURE__*/(() => {\n  class ForgotPasswordComponent {\n    constructor(formBuilder, accountService, alertService) {\n      this.formBuilder = formBuilder;\n      this.accountService = accountService;\n      this.alertService = alertService;\n      this.loading = false;\n      this.submitted = false;\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]]\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      // Only clear 'success' and 'error' alerts, not 'info' alerts that may contain password reset links\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      this.accountService.forgotPassword(this.f.email.value).pipe(first(), finalize(() => this.loading = false)).subscribe({\n        next: response => {\n          // The fake backend will never return a resetToken in the response for security,\n          // but we can extract it from localStorage in development for convenience\n          if (environment.useFakeBackend) {\n            // Get the reset token from localStorage for this user's email\n            const accountsKey = 'request-management-accounts';\n            const accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n            const account = accounts.find(x => x.email === this.f.email.value);\n            if (account && account.resetToken) {\n              // Create the reset URL directly\n              const resetUrl = `${window.location.origin}/account/reset-password?token=${account.resetToken.token}`;\n              // Show a success message with the reset link embedded\n              this.alertService.success(`\n                                <strong>Password Reset Instructions</strong>\n                                <p>Since you're using the fake backend, here's your reset link:</p>\n                                <p><a href=\"${resetUrl}\" class=\"alert-link\">${resetUrl}</a></p>\n                                <p class=\"mb-0\"><small>(In a real application, this would be sent via email)</small></p>\n                            `, {\n                autoClose: false,\n                keepAfterRouteChange: true\n              });\n              // Also log it to console for backup\n              console.log('PASSWORD RESET URL:', resetUrl);\n            } else {\n              // Try to find ANY account with a reset token (for demo purposes)\n              const anyAccountWithToken = accounts.find(x => x.resetToken);\n              if (anyAccountWithToken) {\n                const resetUrl = `${window.location.origin}/account/reset-password?token=${anyAccountWithToken.resetToken.token}`;\n                this.alertService.success(`\n                                    <strong>Demo Reset Link</strong>\n                                    <p>Here's a demo reset link you can use:</p>\n                                    <p><a href=\"${resetUrl}\" class=\"alert-link\">${resetUrl}</a></p>\n                                `, {\n                  autoClose: false,\n                  keepAfterRouteChange: true\n                });\n              } else {\n                // If no tokens at all, create a fake one\n                const demoToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n                const resetUrl = `${window.location.origin}/account/reset-password?token=${demoToken}`;\n                this.alertService.success(`\n                                    <strong>Demo Reset Link</strong>\n                                    <p>Here's a demonstration reset link (note: this specific link won't work as it's randomly generated):</p>\n                                    <p><a href=\"${resetUrl}\" class=\"alert-link\">${resetUrl}</a></p>\n                                `, {\n                  autoClose: false,\n                  keepAfterRouteChange: true\n                });\n              }\n            }\n          } else {\n            this.alertService.success('Please check your email for password reset instructions');\n          }\n        },\n        error: error => {\n          this.alertService.error(error);\n        }\n      });\n    }\n  }\n  ForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n    return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i2.AlertService));\n  };\n  ForgotPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ForgotPasswordComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"../login\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n    template: function ForgotPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\", 0);\n        i0.ɵɵtext(1, \"Forgot Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\");\n        i0.ɵɵtext(6, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, ForgotPasswordComponent_div_8_Template, 3, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3)(10, \"button\", 6);\n        i0.ɵɵtemplate(11, ForgotPasswordComponent_span_11_Template, 1, 0, \"span\", 7);\n        i0.ɵɵtext(12, \" Submit \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"a\", 8);\n        i0.ɵɵtext(14, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.submitted && ctx.f.email.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.email.errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.RouterLink],\n    encapsulation: 2\n  });\n  return ForgotPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}