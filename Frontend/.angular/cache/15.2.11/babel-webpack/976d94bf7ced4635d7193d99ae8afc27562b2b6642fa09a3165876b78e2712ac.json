{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_div_7_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const account_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", account_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", account_r12.firstName, \" \", account_r12.lastName, \" \");\n  }\n}\nfunction AddEditComponent_div_7_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Account is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, AddEditComponent_div_7_div_7_div_1_Template, 2, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.f.accountId.errors.required);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction AddEditComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"label\", 7);\n    i0.ɵɵtext(2, \"Account\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 30)(4, \"option\", 14);\n    i0.ɵɵtext(5, \"Select Account...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddEditComponent_div_7_option_6_Template, 2, 3, \"option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, AddEditComponent_div_7_div_7_Template, 2, 1, \"div\", 16);\n    i0.ɵɵelementStart(8, \"small\", 31);\n    i0.ɵɵtext(9, \"Select the user account to associate with this employee\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx_r0.submitted && ctx_r0.f.accountId.errors));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.availableAccounts);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.submitted && ctx_r0.f.accountId.errors);\n  }\n}\nfunction AddEditComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.selectedAccountName));\n  }\n}\nfunction AddEditComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Employee ID is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtemplate(1, AddEditComponent_div_14_div_1_Template, 2, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.employeeId.errors.required);\n  }\n}\nfunction AddEditComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r15.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dept_r15.name, \" \");\n  }\n}\nfunction AddEditComponent_div_23_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Department is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, AddEditComponent_div_23_div_1_Template, 2, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.departmentId.errors.required);\n  }\n}\nfunction AddEditComponent_div_28_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Position is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, AddEditComponent_div_28_div_1_Template, 2, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.f.position.errors.required);\n  }\n}\nfunction AddEditComponent_div_34_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Hire Date is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵtemplate(1, AddEditComponent_div_34_div_1_Template, 2, 0, \"div\", 34);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.f.hireDate.errors.required);\n  }\n}\nfunction AddEditComponent_span_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 37);\n  }\n}\nfunction AddEditComponent_div_50_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 37);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nfunction AddEditComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 38)(1, \"div\", 39)(2, \"div\", 40)(3, \"div\", 41)(4, \"h5\", 42);\n    i0.ɵɵtext(5, \"Confirm Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_50_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.cancelDelete());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 44)(8, \"div\", 45);\n    i0.ɵɵelement(9, \"i\", 46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 47);\n    i0.ɵɵtext(11, \"Are you sure you want to delete this employee?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"p\", 48);\n    i0.ɵɵtext(13, \"This action cannot be undone.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 49)(15, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_50_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.cancelDelete());\n    });\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_50_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.confirmDelete());\n    });\n    i0.ɵɵtemplate(18, AddEditComponent_div_50_span_18_Template, 1, 0, \"span\", 25);\n    i0.ɵɵtext(19, \" Delete Employee \");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx_r8.showDeleteModal));\n    i0.ɵɵadvance(18);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.loading);\n  }\n}\nfunction AddEditComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 52);\n  }\n}\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    constructor(formBuilder, route, router, accountService, employeeService, departmentService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.departmentService = departmentService;\n      this.alertService = alertService;\n      this.loading = false;\n      this.submitted = false;\n      this.accounts = [];\n      this.availableAccounts = [];\n      this.departments = [];\n      this.selectedAccountName = '';\n      this.existingEmployeeIds = [];\n      this.showDeleteModal = false;\n      this.showDepartmentModal = false;\n      this.employeeToDelete = null;\n      this.newDepartmentId = '';\n      this.currentEmployee = null;\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Load all departments\n      this.departmentService.getAll().pipe(first()).subscribe(departments => {\n        this.departments = departments;\n      });\n      // Initialize form with appropriate disabled states\n      this.form = this.formBuilder.group({\n        accountId: [{\n          value: '',\n          disabled: !this.isAddMode\n        }, this.isAddMode ? Validators.required : []],\n        employeeId: ['', Validators.required],\n        departmentId: ['', Validators.required],\n        position: ['', Validators.required],\n        hireDate: ['', Validators.required],\n        status: ['Active']\n      });\n      // Load existing employee IDs for validation\n      this.employeeService.getAll().pipe(first()).subscribe(employees => {\n        this.existingEmployeeIds = employees.map(e => e.employeeId);\n      });\n      // Load all accounts and filter available ones\n      this.accountService.getAll().pipe(first()).subscribe({\n        next: accounts => {\n          this.accounts = accounts;\n          if (!this.isAddMode) {\n            // In edit mode, first load the current employee\n            this.employeeService.getById(this.id).pipe(first()).subscribe({\n              next: employee => {\n                this.currentEmployee = Object.assign(Object.assign({}, employee), {\n                  hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\n                });\n                this.form.patchValue(this.currentEmployee);\n                if (employee.account) {\n                  this.selectedAccountName = `${employee.account.firstName} ${employee.account.lastName}`;\n                }\n                // Update available accounts after loading current employee\n                this.updateAvailableAccounts();\n              },\n              error: error => {\n                this.alertService.error(error);\n              }\n            });\n          } else {\n            // In add mode, just update available accounts\n            this.updateAvailableAccounts();\n          }\n        },\n        error: error => {\n          this.alertService.error('Error loading accounts: ' + error);\n        }\n      });\n      // Watch for account changes to update the name display\n      this.form.get('accountId').valueChanges.subscribe(accountId => {\n        const account = this.accounts.find(a => a.id === accountId);\n        if (account) {\n          this.selectedAccountName = `${account.firstName} ${account.lastName}`;\n        } else {\n          this.selectedAccountName = '';\n        }\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        return;\n      }\n      // Check if employee ID already exists in add mode\n      if (this.isAddMode && this.existingEmployeeIds.includes(this.form.get('employeeId').value)) {\n        this.alertService.error('Employee ID already exists');\n        return;\n      }\n      this.loading = true;\n      if (this.isAddMode) {\n        this.createEmployee();\n      } else {\n        this.updateEmployee();\n      }\n    }\n    createEmployee() {\n      const formData = Object.assign({}, this.form.getRawValue() // Get values from disabled fields too\n      );\n\n      this.employeeService.create(formData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee added successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    updateEmployee() {\n      const formData = Object.assign({}, this.form.getRawValue() // Get values from disabled fields too\n      );\n\n      this.employeeService.update(this.id, formData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Delete modal methods\n    openDeleteModal(id) {\n      this.employeeToDelete = id;\n      this.showDeleteModal = true;\n    }\n    cancelDelete() {\n      this.showDeleteModal = false;\n      this.employeeToDelete = null;\n    }\n    confirmDelete() {\n      if (!this.employeeToDelete) return;\n      this.loading = true;\n      this.employeeService.delete(this.employeeToDelete).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee deleted successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Change Department modal methods\n    openChangeDepartment() {\n      this.submitted = false;\n      this.newDepartmentId = '';\n      this.showDepartmentModal = true;\n    }\n    cancelChangeDepartment() {\n      this.showDepartmentModal = false;\n      this.newDepartmentId = '';\n      this.submitted = false;\n    }\n    confirmChangeDepartment() {\n      this.submitted = true;\n      if (!this.newDepartmentId) {\n        return;\n      }\n      this.loading = true;\n      // Convert the current employee to the correct type\n      const updateData = Object.assign(Object.assign({}, this.currentEmployee), {\n        departmentId: this.newDepartmentId,\n        hireDate: this.currentEmployee.hireDate ? new Date(this.currentEmployee.hireDate) : null\n      });\n      this.employeeService.update(this.id, updateData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Department changed successfully', {\n            keepAfterRouteChange: true\n          });\n          this.loading = false;\n          this.showDepartmentModal = false;\n          // Refresh the current employee data\n          this.employeeService.getById(this.id).pipe(first()).subscribe(employee => {\n            // Convert the employee to EmployeeForm type\n            this.currentEmployee = Object.assign(Object.assign({}, employee), {\n              hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\n            });\n            this.form.patchValue(this.currentEmployee);\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Computed property to get available departments (excluding current department)\n    get availableDepartments() {\n      if (!this.currentEmployee || !this.currentEmployee.departmentId) {\n        return this.departments;\n      }\n      // Convert all IDs to strings for comparison\n      const currentDeptIdStr = String(this.currentEmployee.departmentId);\n      return this.departments.filter(dept => String(dept.id) !== currentDeptIdStr);\n    }\n    updateAvailableAccounts() {\n      this.employeeService.getAll().pipe(first()).subscribe({\n        next: employees => {\n          const usedAccountIds = employees.map(e => e.accountId.toString());\n          // Filter accounts:\n          // 1. Remove admin accounts\n          // 2. Remove accounts that are already assigned to employees (except in edit mode for current account)\n          this.availableAccounts = this.accounts.filter(account => {\n            var _a, _b;\n            const isAdmin = account.role === Role.Admin;\n            const isAlreadyAssigned = usedAccountIds.includes(account.id);\n            const isCurrentAccount = !this.isAddMode && account.id === ((_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('accountId')) === null || _b === void 0 ? void 0 : _b.value);\n            return !isAdmin && (!isAlreadyAssigned || isCurrentAccount);\n          });\n          // Sort accounts by name for better UX\n          this.availableAccounts.sort((a, b) => `${a.firstName} ${a.lastName}`.localeCompare(`${b.firstName} ${b.lastName}`));\n        },\n        error: error => {\n          this.alertService.error('Error loading employees: ' + error);\n        }\n      });\n    }\n  }\n  AddEditComponent.ɵfac = function AddEditComponent_Factory(t) {\n    return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.EmployeeService), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n  AddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 52,\n    vars: 28,\n    consts: [[1, \"container\"], [1, \"mb-4\"], [1, \"card\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\", \"mb-4\"], [\"class\", \"col-md-6 mb-3\", 4, \"ngIf\"], [1, \"form-label\", \"fw-bold\"], [1, \"input-group\", \"mb-2\"], [\"type\", \"text\", \"formControlName\", \"employeeId\", \"placeholder\", \"Enter employee ID\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"input-group-text bg-light\", 4, \"ngIf\"], [\"class\", \"invalid-feedback d-block\", 4, \"ngIf\"], [1, \"col-md-6\"], [\"formControlName\", \"departmentId\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"position\", \"placeholder\", \"Enter position\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"date\", \"formControlName\", \"hireDate\", 1, \"form-control\", 3, \"ngClass\", \"readonly\"], [\"formControlName\", \"status\", 1, \"form-select\"], [\"value\", \"Active\"], [\"value\", \"Inactive\"], [1, \"border-top\", \"pt-3\"], [1, \"btn-group\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"/employees\", 1, \"btn\", \"btn-secondary\", \"ms-2\"], [\"class\", \"modal fade\", \"id\", \"deleteModal\", \"tabindex\", \"-1\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"modal-backdrop show\", 4, \"ngIf\"], [1, \"col-md-6\", \"mb-3\"], [\"formControlName\", \"accountId\", 1, \"form-select\", 3, \"ngClass\"], [1, \"form-text\", \"text-muted\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"input-group-text\", \"bg-light\"], [1, \"invalid-feedback\", \"d-block\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"], [\"id\", \"deleteModal\", \"tabindex\", \"-1\", 1, \"modal\", \"fade\", 3, \"ngClass\"], [1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-header\", \"bg-danger\", \"text-white\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"modal-body\"], [1, \"text-center\", \"mb-3\"], [1, \"fas\", \"fa-exclamation-triangle\", \"text-danger\", 2, \"font-size\", \"3rem\"], [1, \"text-center\", \"mb-0\"], [1, \"text-center\", \"text-muted\", \"mb-0\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"modal-backdrop\", \"show\"]],\n    template: function AddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtemplate(7, AddEditComponent_div_7_Template, 10, 5, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\")(9, \"label\", 7);\n        i0.ɵɵtext(10, \"Employee ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵelement(12, \"input\", 9);\n        i0.ɵɵtemplate(13, AddEditComponent_span_13_Template, 3, 3, \"span\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, AddEditComponent_div_14_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 5)(16, \"div\", 12)(17, \"label\", 7);\n        i0.ɵɵtext(18, \"Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"select\", 13)(20, \"option\", 14);\n        i0.ɵɵtext(21, \"Select Department...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, AddEditComponent_option_22_Template, 2, 2, \"option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, AddEditComponent_div_23_Template, 2, 1, \"div\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 12)(25, \"label\", 7);\n        i0.ɵɵtext(26, \"Position\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 17);\n        i0.ɵɵtemplate(28, AddEditComponent_div_28_Template, 2, 1, \"div\", 16);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 5)(30, \"div\", 12)(31, \"label\", 7);\n        i0.ɵɵtext(32, \"Hire Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(33, \"input\", 18);\n        i0.ɵɵtemplate(34, AddEditComponent_div_34_Template, 2, 1, \"div\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 12)(36, \"label\", 7);\n        i0.ɵɵtext(37, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"select\", 19)(39, \"option\", 20);\n        i0.ɵɵtext(40, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"option\", 21);\n        i0.ɵɵtext(42, \"Inactive\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(43, \"div\", 22)(44, \"div\", 23)(45, \"button\", 24);\n        i0.ɵɵtemplate(46, AddEditComponent_span_46_Template, 1, 0, \"span\", 25);\n        i0.ɵɵtext(47, \" Save Employee \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(48, \"a\", 26);\n        i0.ɵɵtext(49, \"Cancel\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵtemplate(50, AddEditComponent_div_50_Template, 20, 4, \"div\", 27);\n        i0.ɵɵtemplate(51, AddEditComponent_div_51_Template, 1, 0, \"div\", 28);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.isAddMode ? \"Add New\" : \"Edit\", \" Employee\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isAddMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.isAddMode ? \"col-md-6\" : \"col-md-12\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(20, _c0, ctx.submitted && ctx.f.employeeId.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedAccountName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.employeeId.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(22, _c0, ctx.submitted && ctx.f.departmentId.errors));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.departmentId.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c0, ctx.submitted && ctx.f.position.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.position.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(26, _c0, ctx.submitted && ctx.f.hireDate.errors))(\"readonly\", !ctx.isAddMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.hireDate.errors);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.showDeleteModal);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showDeleteModal);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink, i4.TitleCasePipe],\n    encapsulation: 2\n  });\n  return AddEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}